head(total_jobs_prop_rounded)
#| code-fold: true
#| code-summary: "Show the code"
total_df <- total_jobs_prop_rounded %>%
summarize(total_jobs = sum(total_jobs),
census_block_count = sum(census_block_count),
prop = sum(census_block_count)/sum(census_block_count)*100,
total_jobs_rounded = (sum(total_jobs_rounded)),
prop_rounded = sum(total_jobs_rounded)/sum(total_jobs_rounded)*100)
total_df <- cbind(ctyname = 'Total', total_df)
total_jobs_prop_rounded_w_total <- total_jobs_prop_rounded %>%
head() %>%
rbind(total_df)
total_jobs_prop_rounded_w_total
#| code-fold: true
#| code-summary: "Show the code"
# Basic barplot
ggplot(data=total_jobs_prop_rounded %>% head(), aes(x=ctyname, y=prop_rounded)) +
geom_bar(stat="identity") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#| code-fold: true
#| code-summary: "Show the code"
ggsave("files_for_export/export_1_bar_plot.png")
#| code-fold: true
#| code-summary: "Show the code"
total_jobs_prop_rounded_w_total %>% write_csv("files_for_documentation/export_1_counts_for_bar_plot.csv")
total_jobs_prop_rounded_w_total
#| code-fold: true
#| code-summary: "Show the code"
median_jobs_per_census_block <- df_inner_join %>%
group_by(ctyname) %>%
summarize(
median_jobs_census_block = median(C000) #calculating the median
) %>% arrange(desc(median_jobs_census_block)) %>%
head()
median_jobs_per_census_block
#| code-fold: true
#| code-summary: "Show the code"
median_jobs_per_census_block <- df_inner_join %>%
group_by(ctyname) %>%
summarize(
median_jobs_census_block = median(C000), #calculating the median
count_census_block = n_distinct(tabblk2010) #variable for disclosure review
) %>% arrange(desc(median_jobs_census_block)) %>%
head()
median_jobs_per_census_block
#| code-fold: true
#| code-summary: "Show the code"
fuzzy_median_jobs_per_census_block <- df_inner_join %>%
group_by(ctyname) %>%
summarize(
median_jobs_census_block = median(C000),
fuzzy_median_jobs = ((quantile(C000, .45) + quantile(C000, .55))/2), #calculating fuzzy median
count_census_block = n_distinct(tabblk2010) #variable for disclosure review
) %>%
mutate(
fuzzy_median_jobs_rounded = round(fuzzy_median_jobs, digits = -1)) %>%
arrange(desc(median_jobs_census_block)) %>%
head()
fuzzy_median_jobs_per_census_block
export_median_jobs_fuzzy_rounded <- fuzzy_median_jobs_per_census_block %>%
mutate(fuzzy_median_jobs_rounded = ifelse( #applying rounding rules
count_census_block < 10,
fuzzy_median_jobs_rounded == NA,
fuzzy_median_jobs_rounded)) %>%
select(ctyname, fuzzy_median_jobs_rounded)
export_median_jobs_fuzzy_rounded
fuzzy_median_jobs_per_census_block %>% write_csv("files_for_documentation/export_2_data.csv")
export_median_jobs_fuzzy_rounded %>% write_csv("files_for_export/export_2_fuzzy_median_jobs.csv")
library(tidyverse)
library(openxlsx)
library(data.table)
library(httr)
library(janitor)
#First, we read in crosswalk files for the various codes that comprise a BLS series_id.
series <-
fread(text=content(GET(url = "https://download.bls.gov/pub/time.series/la/la.series",
user_agent("josh.edelmann@coleridgeinitiative.org"))),sep="\t") %>%
select(-footnote_codes)
View(series)
area_type <-
fread(text=content(GET(url = "https://download.bls.gov/pub/time.series/la/la.area_type",
user_agent("josh.edelmann@coleridgeinitiative.org"))),sep="\t")
measures <-
fread(text=content(GET(url = "https://download.bls.gov/pub/time.series/la/la.measure",
user_agent("josh.edelmann@coleridgeinitiative.org"))),sep="\t")
seasonal <-
fread(text=content(GET(url = "https://download.bls.gov/pub/time.series/la/la.seasonal",
user_agent("josh.edelmann@coleridgeinitiative.org"))),sep="\t")
period <-
fread(text=content(GET(url = "https://download.bls.gov/pub/time.series/la/la.period",
user_agent("josh.edelmann@coleridgeinitiative.org"))),sep="\t")
area <-
fread(text=content(GET(url = "https://download.bls.gov/pub/time.series/la/la.area",
user_agent("josh.edelmann@coleridgeinitiative.org"))),sep="\t")
#Now, let's read in some actual estimates...
#Non-seasonally adjusted state:
state_u <-
fread(text=content(GET(url = "https://download.bls.gov/pub/time.series/la/la.data.2.AllStatesU",
user_agent("josh.edelmann@coleridgeinitiative.org"))),sep="\t") %>%
select(-footnote_codes)
#Seasonally adjusted state:
state_s <-
fread(text=content(GET(url = "https://download.bls.gov/pub/time.series/la/la.data.3.AllStatesS",
user_agent("josh.edelmann@coleridgeinitiative.org"))),sep="\t") %>%
select(-footnote_codes)
#Non-seasonally adjusted counties and equivalents
county <- fread(text=content(GET(url = "https://download.bls.gov/pub/time.series/la/la.data.64.County",
user_agent("josh.edelmann@coleridgeinitiative.org"))),sep="\t") %>%
select(-footnote_codes)
#Finally, let's bind our data frames containing LAUS estimates...
laus <- state_s %>%
bind_rows(state_u) %>%
bind_rows(county) %>%
#...and then join our crosswalks...
left_join(series) %>%
left_join(measures) %>%
left_join(area_type) %>%
left_join(period) %>%
left_join(area) %>%
rename(seasonal_code = seasonal) %>%
left_join(seasonal) %>%
#...and select the columns that we would reasonably need for analysis...
select(
series_id,
area_text,
area_code,
areatype_text,
area_type_code,
year,
period,
period_name,
seasonal_code,
seasonal_text,
measure_text,
value) %>%
#...and then pivot our measures wider.
pivot_wider(names_from = measure_text, values_from = value)
laus
avg_yearly_wage <- data.frame(avg_wage = c(39029, 40257, 56987, 75908, 89032),
year = c(2015, 2016, 2017, 2018, 2019),
count_ssn = c(767, 890, 543, 987, 231))
avg_yearly_wage <- data.frame(avg_wage = c(39029, 40257, 56987, 75908, 89032),
year = c(2015, 2016, 2017, 2018, 2019),
count_ssn = c(767, 890, 543, 987, 231))
avg_yearly_wage %>% select(avg_wage, year) %>% write_csv("figures_for_export/export_1.csv")
avg_yearly_wage %>% select(avg_wage, year)
options(warn=-1)
suppressMessages(library(tidyverse))
suppressMessages(library(R.utils))
suppressMessages(library(ggplot2))
avg_yearly_wage %>% write_csv("supporting_data/export_1_data.csv")
avg_yearly_wage
avg_yearly_wage %>% select(avg_wage, year) %>% write_csv("figures_for_export/export_1.csv")
avg_yearly_wage %>% select(avg_wage, year) %>% mutate(avg_wage_rounded = round(avg_wage, 1))
avg_yearly_wage %>% select(avg_wage, year) %>% write_csv("figures_for_export/export_1.csv")
avg_yearly_wage %>% select(avg_wage, year) %>% mutate(avg_wage_rounded = round(avg_wage, -1))
avg_yearly_wage %>% select(avg_wage, year) %>% write_csv("figures_for_export/export_1.csv")
avg_yearly_wage %>% select(avg_wage, year) %>% mutate(avg_wage_rounded = round(avg_wage, -2))
avg_yearly_wage %>% mutate(avg_wage_rounded = round(avg_wage, -2)) %>% select(avg_wage_rounded, year)
avg_yearly_wage %>% mutate(avg_wage_rounded = round(avg_wage, -2))
avg_yearly_wage %>% write_csv("supporting_data/export_1_data.csv")
avg_yearly_wage %>% mutate(avg_wage_rounded = round(avg_wage, -2))
avg_yearly_wage <- data.frame(avg_wage = c(39029, 40257, 56987, 75908, 89032),
year = c(2015, 2016, 2017, 2018, 2019),
count_ssn = c(767, 890, 543, 987, 231),
emp_count = c(34,12,99,54,87))
avg_yearly_wage %>% select(avg_wage, year) %>% write_csv("figures_for_export/export_1.csv")
avg_yearly_wage %>% mutate(avg_wage_rounded = round(avg_wage, -2)) %>% select(avg_wage_rounded, year)
avg_yearly_wage %>% write_csv("supporting_data/export_1_data.csv")
avg_yearly_wage %>% mutate(avg_wage_rounded = round(avg_wage, -2))
count_of_genders <- data.frame(gender = c("M", "F", "Total"),
avg_wage = c(3500, 2500, 3000),
count_ssn = c(10,5,15))
count_of_genders
ggplot(data=count_of_genders, aes(x=gender, y=avg_wage)) +
geom_bar(stat="identity")
avg_wage_by_gender <- data.frame(gender = c("M", "F", "Total"),
avg_wage = c(3500, 2500, 3000),
count_ssn = c(10,5,15))
avg_wage_by_gender <- data.frame(gender = c("M", "F", "Total_Avg"),
avg_wage = c(3523, 2565, 3044),
count_ssn = c(10,5,15),
emp_count = c(9, 4, 3))
avg_wage_by_gender %>% mutate(avg_wage_rounded = round(avg_wage, -2))
avg_wage_by_gender <- avg_wage_by_gender %>% mutate(avg_wage_rounded = round(avg_wage, -2))
ggplot(data=avg_wage_by_gender, aes(x=gender, y=avg_wage_rounded)) +
geom_bar(stat="identity")
avg_wage_by_gender %>% write_csv("supporting_data/export_2_data.csv")
avg_wage_by_gender
median <- data.frame(gender = c("M", "F", "M", "F", "M", "F", "M", "F", "M", "F"),
ethnicity = c('Hispanic','Native Hawaiian', 'Asian', 'White', 'Black'),
median_qtr_wage = c(4567, 9860, 9043, 8954, 2134, 124, 4598, 3486, 854, 3904),
fuzzy_median_qtr_wage = c(4530, 9850, 9056, 8967, 2109, 109, 4587, 3499, 849, 3911),
n_counts = c(98, 45, 94, 42, 89, 9, 204, 984, 2, 485))
median
median <- data.frame(gender = c("M", "F", "M", "F", "M", "F", "M", "F", "M", "F"),
ethnicity = c('Hispanic','Native Hawaiian', 'Asian', 'White', 'Black'),
median_qtr_wage = c(4567, 9860, 9043, 8954, 2134, 124, 4598, 3486, 854, 3904),
fuzzy_median_qtr_wage = c(4530, 9850, 9056, 8967, 2109, 109, 4587, 3499, 849, 3911),
n_counts = c(98, 45, 94, 42, 89, 9, 204, 984, 2, 485))
median <- data.frame(gender = c("M", "F", "M", "F", "M", "F", "M", "F", "M", "F"),
ethnicity = c('Hispanic','Native Hawaiian', 'Asian', 'White', 'Black'),
median_qtr_wage = c(4567, 9860, 9043, 8954, 2134, 124, 4598, 3486, 854, 3904),
fuzzy_median_qtr_wage = c(4530, 9850, 9056, 8967, 2109, 109, 4587, 3499, 849, 3911),
n_counts = c(98, 45, 94, 42, 89, 9, 204, 984, 2, 485),
emp_counts = c(6, 9, 4, 3, 3, 5, 4, 87, 1, 90))
median
ggplot(data=median, aes(x=ethnicity, y=fuzzy_median_qtr_wage, fill=gender)) +
geom_bar(position='dodge', stat='identity')
median %>% mutate(fuzzy_wage_rounded = round(fuzzy_median_qtr_wage, -2))
median <- median %>% mutate(fuzzy_wage_rounded = round(fuzzy_median_qtr_wage, -2))
ggplot(data=median, aes(x=ethnicity, y=fuzzy_wage_rounded, fill=gender)) +
geom_bar(position='dodge', stat='identity')
View(median)
median %>% arrange(ethnicity) %>% write_csv("supporting_data/export_3_data.csv")
median %>% arrange(ethnicity)
median %>% arrange(ethnicity, gender)
median %>% arrange(ethnicity) %>% write_csv("supporting_data/export_3_data.csv")
median %>% arrange(ethnicity, gender)
median %>% arrange(ethnicity, gender) %>% mutate(fuzzy_wage_rounded_redacted = ifelse(n_count < 10 | emp_counts < 3, NA, fuzzy_wage_rounded))
median %>% arrange(ethnicity, gender) %>% mutate(fuzzy_wage_rounded_redacted = ifelse(n_counts < 10 | emp_counts < 3, NA, fuzzy_wage_rounded))
ethnicity_data <- data.frame(ethnicity = c('Hispanic','Native Hawaiian', 'Asian', 'White', 'Black', 'total_avg'),
avg_qtr_wage = c(3287, 4098, 1094, 3068, 3398, 2824),
count_ssn = c(10, 59, 109, 32, 11, 230))
ethnicity_data <- data.frame(ethnicity = c('Hispanic','Native Hawaiian', 'Asian', 'White', 'Black', 'total_avg'),
avg_qtr_wage = c(3287, 4098, 1094, 3068, 3398, 2824),
count_ssn = c(10, 59, 109, 32, 11, 230))
ethnicity_data
ggplot(data=ethnicity_data, aes(x=ethnicity, y=avg_qtr_wage)) +
geom_bar(stat="identity")
#ggsave("figures_for_export/export_4.png")
ethnicity_data %>% mutate(avg_wage_rounded = round(avg_qtr_wage, -2))
over_time <- data.frame(year_qtr = c("2018 Q1", "2018 Q2", "2018 Q3", "2018 Q4", "2019 Q1"),
count_ssn = c(22, 56, 75, 80, 102))
over_time
ggplot(data=over_time, aes(x=year_qtr, y=count_ssn, group=1)) +
geom_line() +
geom_point() +
labs(title="Cumulative Count of those that ever earned a living wage",
x ="Year and Quarter", y = "Count of SSN")
#ggsave("figures_for_export/export_5.png")
over_time %>% mutate(count_ssn_rounded = round(count_ssn, 1))
over_time %>% mutate(count_ssn_rounded = round(count_ssn, -1))
over_time <- over_time %>% mutate(count_ssn_rounded = round(count_ssn, -1))
ggplot(data=over_time, aes(x=year_qtr, y=count_ssn_rounded, group=1)) +
geom_line() +
geom_point() +
labs(title="Cumulative Count of those that ever earned a living wage",
x ="Year and Quarter", y = "Count of SSN")
#ggsave("figures_for_export/export_5.png")
ggplot(data=over_time, aes(x=year_qtr, y=count_ssn_rounded)) +
geom_line() +
geom_point() +
labs(title="Cumulative Count of those that ever earned a living wage",
x ="Year and Quarter", y = "Count of SSN")
#ggsave("figures_for_export/export_5.png")
ggplot(data=over_time, aes(x=year_qtr, y=count_ssn_rounded, group=1)) +
geom_line() +
geom_point() +
labs(title="Cumulative Count of those that ever earned a living wage",
x ="Year and Quarter", y = "Count of SSN")
#ggsave("figures_for_export/export_5.png")
over_time %>% write_csv("supporting_data/export_5_data.csv")
over_time
ggplot(data=over_time, aes(x=year_qtr, y=count_ssn_rounded, group=1)) +
geom_line() +
geom_point() +
labs(title="Cumulative Count of those that ever earned a living wage",
x ="Year and Quarter", y = "Count of Individuals")
#ggsave("figures_for_export/export_5.png")
set.seed(109)
age_total <- data.frame(age_group = c("18-30", "31-40", "41-50", "51-60", "61+"),
gender = rep(c("M", "F"), each=5),
#ethnicity = c('Hispanic','Native Hawaiian', 'Asian', 'White', 'Black'),
avg_qtr_wage = sample(989:10000, 10, replace=TRUE),
total_n = sample(50:1000, 10))
set.seed(109)
age_degree <- data.frame(age_group = c("18-30", "31-40", "41-50", "51-60", "61+"),
gender = rep(c("M", "F"), each=5),
#ethnicity = c('Hispanic','Native Hawaiian', 'Asian', 'White', 'Black'),
avg_qtr_wage = sample(500:2000, 10, replace=TRUE),
degree = c("Associates"),
n = sample(1:50, 10))
age_total
d <- age_total %>% mutate(total_n = total_n - 2)
ggplot(data = d, aes(x = age_group, y = avg_qtr_wage, fill=gender)) +
geom_bar(stat="identity", position = 'dodge') +
labs(title = "On average females in the 41-50 age group\n make $7858.00 less than their male counterparts")
#ggsave("figures_for_export/export_6.png")
d %>% write_csv("supporting_data/export_6_data.csv")
d
age_total %>% mutate(avg_qtr_wage_rounded = ifelse(avg_qtr_wage < 1000, round(avg_qtr_wage, -1), round(avg_qtr_wage,-2)))
age_total %>% mutate(avg_qtr_wage_rounded = round(avg_qtr_wage,-2))
age_total <- age_total %>% mutate(avg_qtr_wage_rounded = round(avg_qtr_wage,-2))
d <- age_total %>% mutate(total_n = total_n - 2)
ggplot(data = d, aes(x = age_group, y = avg_qtr_wage_rounded, fill=gender)) +
geom_bar(stat="identity", position = 'dodge') +
labs(title = "On average females in the 41-50 age group\n make $7858.00 less than their male counterparts")
#ggsave("figures_for_export/export_6.png")
View(d)
View(age_total)
d %>% write_csv("supporting_data/export_6_data.csv")
d
age_degree
age_degree %>% mutate(avg_wage_rounded = round(avg_qtr_wage, -2))
age_degree <- age_degree %>% mutate(avg_wage_rounded = round(avg_qtr_wage, -2))
age_degree
ggplot(data = age_degree, aes(x = gender, y = avg_wage_rounded, fill = age_group)) +
geom_bar(stat="identity", position = 'dodge') +
labs(title="Females make more than males")
age_degree %>% write_csv("supporting_data/export_6_data.csv")
age_degree
age_total %>% group_by(age_group) %>% summarize(total_n_by_age_gender = sum(total_n)) #%>% write_csv("supporting_data/export_8.csv")
age_total
age_total %>% group_by(age_group) %>%
summarize(total_n_by_age_gender = sum(total_n)) %>%
mutate(total_n_rounded = round(total_n, -2))
age_total %>% group_by(age_group) %>%
summarize(total_n_by_age_gender = sum(total_n)) %>%
mutate(total_n_rounded = round(total_n_by_age_gender, -2))
mutate(total_n_rounded = ifelse(total_n_by_age_gender < 1000, round(total_n_by_age_gender, -1), round(total_n_by_age_gender, -2))
age_total %>% group_by(age_group) %>%
age_total %>% group_by(age_group) %>%
summarize(total_n_by_age_gender = sum(total_n))
age_total %>% group_by(age_group) %>%
summarize(total_n_by_age_gender = sum(total_n)) %>%
mutate(total_n_rounded = ifelse(total_n_by_age_gender < 1000, round(total_n_by_age_gender, -1), round(total_n_by_age_gender, -2)))
age_total %>% group_by(age_group) %>%
summarize(total_n_by_age_gender = sum(total_n)) %>%
mutate(total_n_rounded = ifelse(total_n_by_age_gender < 1000, round(total_n_by_age_gender, -1), round(total_n_by_age_gender, -2))) %>%
select(age_group, total_n_rounded)
age_total %>% group_by(age_group) %>%
summarize(total_n_by_age_gender = sum(total_n)) %>%
mutate(total_n_rounded = ifelse(total_n_by_age_gender < 1000, round(total_n_by_age_gender, -1), round(total_n_by_age_gender, -2))) %>%
select(age_group, total_n_rounded)
age_total
age_total_export <- age_total %>% group_by(age_group) %>%
summarize(total_n_by_age_gender = sum(total_n)) %>%
mutate(total_n_rounded = ifelse(total_n_by_age_gender < 1000, round(total_n_by_age_gender, -1), round(total_n_by_age_gender, -2))) %>%
select(age_group, total_n_rounded)
age_total_export <- age_total %>% group_by(age_group) %>%
summarize(total_n_by_age_gender = sum(total_n)) %>%
mutate(total_n_rounded = ifelse(total_n_by_age_gender < 1000, round(total_n_by_age_gender, -1), round(total_n_by_age_gender, -2))) %>%
select(age_group, total_n_rounded)
age_total_export
age_total
age_total
d
#| label: fig-mpg
#| fig-cap: "City and highway mileage for 38 popular models of cars."
#| fig-subcap:
#|   - "Color by number of cylinders"
#|   - "Color by engine displacement, in liters"
#| layout-ncol: 2
#| column: page
age_total
d
options(warn=-1)
suppressMessages(library(tidyverse))
suppressMessages(library(R.utils))
suppressMessages(library(ggplot2))
avg_yearly_wage <- data.frame(avg_wage = c(39029, 40257, 56987, 75908, 89032),
year = c(2015, 2016, 2017, 2018, 2019),
count_ssn = c(767, 890, 543, 987, 231),
emp_count = c(34,12,99,54,87))
library(stringr)
library(plyr)
library(stringr)
library(plyr)
library(dplyr)
library(readr)
library(purrr)
library(tidyverse)
states <- 'dc'
get_xwalk <- function(state) {
read_csv(paste0("https://lehd.ces.census.gov/data/lodes/LODES8/", state, "/", state, "_xwalk.csv.gz"), col_types = cols(.default = "c"))
}
xwalk <- map(.f = get_xwalk, .x = states)
xwalk_final <- bind_rows(xwalk)
View(xwalk_final)
xwalk_final %>% head(5)
View(xwalk)
xwalk_final %>% write_csv('dc_lodes_xwalk.csv')
getwd()
xwalk_final %>% nrow()
library(tidyverse)
library(openxlsx)
library(data.table)
library(httr)
library(janitor)
#First, we read in crosswalk files for the various codes that comprise a BLS series_id.
series <-
fread(text=content(GET(url = "https://download.bls.gov/pub/time.series/la/la.series",
user_agent("josh.edelmann@coleridgeinitiative.org"))),sep="\t") %>%
select(-footnote_codes)
area_type <-
fread(text=content(GET(url = "https://download.bls.gov/pub/time.series/la/la.area_type",
user_agent("josh.edelmann@coleridgeinitiative.org"))),sep="\t")
measures <-
fread(text=content(GET(url = "https://download.bls.gov/pub/time.series/la/la.measure",
user_agent("josh.edelmann@coleridgeinitiative.org"))),sep="\t")
seasonal <-
fread(text=content(GET(url = "https://download.bls.gov/pub/time.series/la/la.seasonal",
user_agent("josh.edelmann@coleridgeinitiative.org"))),sep="\t")
period <-
fread(text=content(GET(url = "https://download.bls.gov/pub/time.series/la/la.period",
user_agent("josh.edelmann@coleridgeinitiative.org"))),sep="\t")
area <-
fread(text=content(GET(url = "https://download.bls.gov/pub/time.series/la/la.area",
user_agent("josh.edelmann@coleridgeinitiative.org"))),sep="\t")
#Now, let's read in some actual estimates...
#Non-seasonally adjusted state:
state_u <-
fread(text=content(GET(url = "https://download.bls.gov/pub/time.series/la/la.data.2.AllStatesU",
user_agent("josh.edelmann@coleridgeinitiative.org"))),sep="\t") %>%
select(-footnote_codes)
#Seasonally adjusted state:
state_s <-
fread(text=content(GET(url = "https://download.bls.gov/pub/time.series/la/la.data.3.AllStatesS",
user_agent("josh.edelmann@coleridgeinitiative.org"))),sep="\t") %>%
select(-footnote_codes)
#Non-seasonally adjusted counties and equivalents
county <- fread(text=content(GET(url = "https://download.bls.gov/pub/time.series/la/la.data.64.County",
user_agent("josh.edelmann@coleridgeinitiative.org"))),sep="\t") %>%
select(-footnote_codes)
#Finally, let's bind our data frames containing LAUS estimates...
laus <- state_s %>%
bind_rows(state_u) %>%
bind_rows(county) %>%
#...and then join our crosswalks...
left_join(series) %>%
left_join(measures) %>%
left_join(area_type) %>%
left_join(period) %>%
left_join(area) %>%
rename(seasonal_code = seasonal) %>%
left_join(seasonal) %>%
#...and select the columns that we would reasonably need for analysis...
select(
series_id,
area_text,
area_code,
areatype_text,
area_type_code,
year,
period,
period_name,
seasonal_code,
seasonal_text,
measure_text,
value) %>%
#...and then pivot our measures wider.
pivot_wider(names_from = measure_text, values_from = value)
View(laus)
View(laus)
#Finally, let's bind our data frames containing LAUS estimates...
laus <- state_s %>%
bind_rows(state_u) %>%
bind_rows(county) %>%
#...and then join our crosswalks...
left_join(series) %>%
left_join(measures) %>%
left_join(area_type) %>%
left_join(period) %>%
left_join(area) %>%
rename(seasonal_code = seasonal) %>%
left_join(seasonal) %>%
#...and select the columns that we would reasonably need for analysis...
select(
area_text,
area_code,
areatype_text,
area_type_code,
year,
period,
period_name,
seasonal_code,
seasonal_text,
measure_text,
value) %>%
#...and then pivot our measures wider.
pivot_wider(names_from = measure_text, values_from = value)
View(measures)
View(laus)
laus %>% filter(area_text == 'Kentucky')
ky <- laus %>% filter(area_text == 'Kentucky')
View(ky)
laus %>% distinct(areatype_text)
ky <- laus %>% filter(areatype_text == 'Counties and equivalents')
View(ky)
ky %>% filter(str_contains(area_text, 'Ky'))
ky %>% filter(str_detect(area_text, 'KY'))
ky <- ky %>% filter(str_detect(area_text, 'KY'))
View(ky)
url <- paste0("jdbc:redshift:iam://adrf-redshift01.cdy8ch2udktk.us-gov-west-1.redshift.amazonaws.com:5439/projects; loginToRp=urn:amazon:webservices:govcloud;",
"ssl=true;AutoCreate=true;",
"idp_host=adfs.adrf.net;",
"idp_port=443;",
"ssl_insecure=true;",
"plugin_name=com.amazon.redshift.plugin.AdfsCredentialsProvider")
url
url <- paste0("jdbc:redshift:iam://adrf-redshift01.cdy8ch2udktk.us-gov-west-1.redshift.amazonaws.com:5439/projects;",
"loginToRp=urn:amazon:webservices:govcloud;",
"ssl=true;AutoCreate=true;",
"idp_host=adfs.adrf.net;",
"idp_port=443;",
"ssl_insecure=true;",
"plugin_name=com.amazon.redshift.plugin.AdfsCredentialsProvider")
terminal
install.packages("nbclient")
setwd("/Users/Josh_1/Documents/coleridgeFiles/git_repos/ada-2023-wi/Class Notebooks")
